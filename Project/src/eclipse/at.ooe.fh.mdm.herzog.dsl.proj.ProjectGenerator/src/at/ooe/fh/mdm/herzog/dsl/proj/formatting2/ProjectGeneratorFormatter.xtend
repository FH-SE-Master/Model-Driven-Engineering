/*
 * generated by Xtext 2.10.0
 */
package at.ooe.fh.mdm.herzog.dsl.proj.formatting2

import at.ooe.fh.mdm.herzog.dsl.proj.projectGenerator.Localized
import at.ooe.fh.mdm.herzog.dsl.proj.projectGenerator.LocalizedEntry
import at.ooe.fh.mdm.herzog.dsl.proj.projectGenerator.LocalizedValue
import at.ooe.fh.mdm.herzog.dsl.proj.projectGenerator.Module
import at.ooe.fh.mdm.herzog.dsl.proj.projectGenerator.ServiceConfig
import at.ooe.fh.mdm.herzog.dsl.proj.services.ProjectGeneratorGrammarAccess
import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import at.ooe.fh.mdm.herzog.dsl.proj.projectGenerator.Observer

class ProjectGeneratorFormatter extends AbstractFormatter2 {

	@Inject extension ProjectGeneratorGrammarAccess

	def dispatch void format(Module module, extension IFormattableDocument document) {
		val open = module.regionFor.keyword("{").prepend[noSpace].append[newLine];
		val close = module.regionFor.keyword("}").prepend[newLine];
		interior(open, close)[indent]

		module.regionFor.keyword("key").prepend[newLine];
		module.regionFor.keyword("cdiEnabled").prepend[newLine];
		module.regionFor.keyword("messageBundles").prepend[newLine];

		module.regionFor.keyword("observers").prepend[newLine];
		val openObs = module.regionFor.keyword("observers {");
		val closeObs = module.regionFor.keyword("}");
		interior(openObs, closeObs)[indent];

		module.regionFor.keyword(";").prepend[noSpace];

		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		module.messageBundles.forEach[format];
		module.observers.forEach[format];
		module.getJpaConfig.format;
		module.getServiceConfig.format;
	}

	def dispatch void format(Localized localized, extension IFormattableDocument document) {
		val open = localized.regionFor.keyword("{").prepend[noSpace].append[newLine];
		val close = localized.regionFor.keyword("}").prepend[newLine];
		interior(open, close)[indent]

		localized.regionFor.keyword("values").prepend[newLine];
		localized.regionFor.keyword(";").prepend[noSpace].append[newLine];

		localized.values.forEach[format];
	}

	def dispatch void format(LocalizedEntry localizedEntry, extension IFormattableDocument document) {
		val open = localizedEntry.regionFor.keyword("{").prepend[newLine].append[newLine];
		val close = localizedEntry.regionFor.keyword("}").prepend[newLine];
		interior(open, close)[indent]

		localizedEntry.regionFor.keyword("key").prepend[newLine];
		localizedEntry.regionFor.keyword("values").prepend[newLine];
		localizedEntry.regionFor.keyword(";").prepend[noSpace];

		localizedEntry.values.forEach[format];
	}

	def dispatch void format(LocalizedValue localizedValue, extension IFormattableDocument document) {
		val open = localizedValue.regionFor.keyword("{").prepend[newLine].append[newLine];
		val close = localizedValue.regionFor.keyword("}").prepend[newLine];
		interior(open, close)[indent]

		localizedValue.regionFor.keyword("locale").prepend[newLine];
		localizedValue.regionFor.keyword("value").prepend[newLine];
		localizedValue.regionFor.keyword(";").prepend[noSpace];
	}

	def dispatch void format(ServiceConfig serviceConfig, extension IFormattableDocument document) {
		serviceConfig.observers.forEach[format];
	}

	def dispatch void format(Observer observer, extension IFormattableDocument document) {
		val open = observer.regionFor.keyword("{").prepend[noSpace].append[newLine];
		val close = observer.regionFor.keyword("}").prepend[newLine];
		interior(open, close)[indent; indent; indent]

		observer.regionFor.keyword("type").prepend[newLine];
		observer.regionFor.keyword("during").prepend[newLine];
		observer.regionFor.keyword("notify").prepend[newLine];
		observer.regionFor.keyword("delegate").prepend[newLine];
		observer.regionFor.keyword(";").prepend[noSpace].append[newLine];
	}

// TODO: implement for JpaConfig, Localized, LocalizedEntry
}
