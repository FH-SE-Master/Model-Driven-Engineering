/*
 * generated by Xtext 2.10.0
 */
package at.ooe.fh.mdm.herzog.dsl.proj.ide.contentassist.antlr;

import at.ooe.fh.mdm.herzog.dsl.proj.ide.contentassist.antlr.internal.InternalProjectGeneratorParser;
import at.ooe.fh.mdm.herzog.dsl.proj.services.ProjectGeneratorGrammarAccess;
import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class ProjectGeneratorParser extends AbstractContentAssistParser {

	@Inject
	private ProjectGeneratorGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalProjectGeneratorParser createParser() {
		InternalProjectGeneratorParser result = new InternalProjectGeneratorParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getLocaleAccess().getAlternatives(), "rule__Locale__Alternatives");
					put(grammarAccess.getBooleanAccess().getAlternatives(), "rule__Boolean__Alternatives");
					put(grammarAccess.getDuringAccess().getAlternatives(), "rule__During__Alternatives");
					put(grammarAccess.getNotifyAccess().getAlternatives(), "rule__Notify__Alternatives");
					put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
					put(grammarAccess.getModuleAccess().getGroup_9(), "rule__Module__Group_9__0");
					put(grammarAccess.getModuleAccess().getGroup_10(), "rule__Module__Group_10__0");
					put(grammarAccess.getServiceConfigAccess().getGroup(), "rule__ServiceConfig__Group__0");
					put(grammarAccess.getServiceConfigAccess().getGroup_1(), "rule__ServiceConfig__Group_1__0");
					put(grammarAccess.getServiceConfigAccess().getGroup_2(), "rule__ServiceConfig__Group_2__0");
					put(grammarAccess.getObserverAccess().getGroup(), "rule__Observer__Group__0");
					put(grammarAccess.getObserverAccess().getGroup_14(), "rule__Observer__Group_14__0");
					put(grammarAccess.getJpaConfigAccess().getGroup(), "rule__JpaConfig__Group__0");
					put(grammarAccess.getJpaConfigAccess().getGroup_6(), "rule__JpaConfig__Group_6__0");
					put(grammarAccess.getLocalizedAccess().getGroup(), "rule__Localized__Group__0");
					put(grammarAccess.getLocalizedAccess().getGroup_2(), "rule__Localized__Group_2__0");
					put(grammarAccess.getLocalizedEntryAccess().getGroup(), "rule__LocalizedEntry__Group__0");
					put(grammarAccess.getLocalizedEntryAccess().getGroup_9(), "rule__LocalizedEntry__Group_9__0");
					put(grammarAccess.getLocalizedValueAccess().getGroup(), "rule__LocalizedValue__Group__0");
					put(grammarAccess.getModuleAccess().getNameAssignment_1(), "rule__Module__NameAssignment_1");
					put(grammarAccess.getModuleAccess().getKeyAssignment_4(), "rule__Module__KeyAssignment_4");
					put(grammarAccess.getModuleAccess().getCdiEnabledAssignment_7(), "rule__Module__CdiEnabledAssignment_7");
					put(grammarAccess.getModuleAccess().getMessageBundlesAssignment_9_2(), "rule__Module__MessageBundlesAssignment_9_2");
					put(grammarAccess.getModuleAccess().getObserversAssignment_10_2(), "rule__Module__ObserversAssignment_10_2");
					put(grammarAccess.getModuleAccess().getJpaConfigAssignment_12(), "rule__Module__JpaConfigAssignment_12");
					put(grammarAccess.getModuleAccess().getServiceConfigAssignment_15(), "rule__Module__ServiceConfigAssignment_15");
					put(grammarAccess.getServiceConfigAccess().getObserversAssignment_1_2(), "rule__ServiceConfig__ObserversAssignment_1_2");
					put(grammarAccess.getServiceConfigAccess().getMessageBundlesAssignment_2_2(), "rule__ServiceConfig__MessageBundlesAssignment_2_2");
					put(grammarAccess.getObserverAccess().getNameAssignment_0(), "rule__Observer__NameAssignment_0");
					put(grammarAccess.getObserverAccess().getTypeAssignment_3(), "rule__Observer__TypeAssignment_3");
					put(grammarAccess.getObserverAccess().getDuringAssignment_6(), "rule__Observer__DuringAssignment_6");
					put(grammarAccess.getObserverAccess().getNotifyAssignment_9(), "rule__Observer__NotifyAssignment_9");
					put(grammarAccess.getObserverAccess().getClassNameAssignment_12(), "rule__Observer__ClassNameAssignment_12");
					put(grammarAccess.getObserverAccess().getQualifierAssignment_14_1(), "rule__Observer__QualifierAssignment_14_1");
					put(grammarAccess.getJpaConfigAccess().getLocalizedEnumsAssignment_3(), "rule__JpaConfig__LocalizedEnumsAssignment_3");
					put(grammarAccess.getJpaConfigAccess().getObserversAssignment_6_1(), "rule__JpaConfig__ObserversAssignment_6_1");
					put(grammarAccess.getLocalizedAccess().getNameAssignment_0(), "rule__Localized__NameAssignment_0");
					put(grammarAccess.getLocalizedAccess().getValuesAssignment_2_2(), "rule__Localized__ValuesAssignment_2_2");
					put(grammarAccess.getLocalizedEntryAccess().getLocalizedKeyAssignment_2(), "rule__LocalizedEntry__LocalizedKeyAssignment_2");
					put(grammarAccess.getLocalizedEntryAccess().getValuesAssignment_6(), "rule__LocalizedEntry__ValuesAssignment_6");
					put(grammarAccess.getLocalizedEntryAccess().getArgsAssignment_9_2(), "rule__LocalizedEntry__ArgsAssignment_9_2");
					put(grammarAccess.getLocalizedValueAccess().getLocaleAssignment_2(), "rule__LocalizedValue__LocaleAssignment_2");
					put(grammarAccess.getLocalizedValueAccess().getValueAssignment_5(), "rule__LocalizedValue__ValueAssignment_5");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalProjectGeneratorParser typedParser = (InternalProjectGeneratorParser) parser;
			typedParser.entryRuleModule();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ProjectGeneratorGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ProjectGeneratorGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
