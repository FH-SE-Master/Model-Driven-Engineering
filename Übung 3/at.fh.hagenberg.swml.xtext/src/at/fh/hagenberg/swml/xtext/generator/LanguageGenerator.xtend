/*
 * generated by Xtext 2.10.0
 */
package at.fh.hagenberg.swml.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import at.fh.hagenberg.swml.xtext.language.WebApplication

/**
 * Here I would say that we have a generator class per type.
 * 
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class LanguageGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
		for (element : resource.allContents.toIterable.filter(typeof(WebApplication))) {
			fsa.generateFile("hibernate.cfg.xml", element.hibernateXML);
		}
	}

	// Template for hibernate config xml file
	def hibernateXML(WebApplication app) '''
		<?xml version="1.0" encoding="utf-8" ?>
			<hibernate-configuration>
				«FOR entity : app.entities»
					<mapping resource="beans/«entity.name».hbm.xml"/>
				«ENDFOR»		
			</hibernate-configuration>
		</xml>
	'''
	
	def entityClass(WebApplication app) {
		
	}
}
