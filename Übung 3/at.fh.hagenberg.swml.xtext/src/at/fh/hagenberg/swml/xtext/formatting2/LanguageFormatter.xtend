/*
 * generated by Xtext 2.10.0
 */
package at.fh.hagenberg.swml.xtext.formatting2

import at.fh.hagenberg.swml.xtext.language.Attribute
import at.fh.hagenberg.swml.xtext.language.Entity
import at.fh.hagenberg.swml.xtext.language.WebApplication
import at.fh.hagenberg.swml.xtext.services.LanguageGrammarAccess
import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import org.eclipse.xtext.Keyword

class LanguageFormatter extends // AbstractDeclarativeFormatter {
AbstractFormatter2 {
//	/**
//	 * Prepares the source formatter for our language
//	 */
//	override protected configureFormatting(FormattingConfig config) {
//		// Search for all pairs of "{" .. "}"
//		for (org.eclipse.xtext.util.Pair<Keyword, Keyword> pair : grammar.findKeywordPairs("{", "}")) {
//			config.setLinewrap.after(pair.first);
//			config.setIndentationIncrement.after(pair.first);
//
//			config.setIndentationDecrement.before(pair.second);
//			config.setLinewrap.before(pair.second);
//			config.setLinewrap(2).after(pair.second);
//		}
//
//		config.autoLinewrap = 80;
//		val languageAccess = grammarAccess as LanguageGrammarAccess;
//		config.setLinewrap.after(languageAccess.attributeRule);
//	}
	@Inject extension LanguageGrammarAccess

	def dispatch void format(WebApplication webApplication, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Entity entities : webApplication.getEntities()) {
			entities.format;
		}
		webApplication.getRelationships.format;
	}

	def dispatch void format(Entity entity, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Attribute attributes : entity.getAttributes()) {
			attributes.format;
		}
	}

// TODO: implement for 
}
