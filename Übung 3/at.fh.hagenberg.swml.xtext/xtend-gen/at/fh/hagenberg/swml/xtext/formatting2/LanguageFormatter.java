/**
 * generated by Xtext 2.10.0
 */
package at.fh.hagenberg.swml.xtext.formatting2;

import at.fh.hagenberg.swml.xtext.language.Attribute;
import at.fh.hagenberg.swml.xtext.language.Entity;
import at.fh.hagenberg.swml.xtext.language.RelationShip;
import at.fh.hagenberg.swml.xtext.language.WebApplication;
import at.fh.hagenberg.swml.xtext.services.LanguageGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class LanguageFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private LanguageGrammarAccess _languageGrammarAccess;
  
  protected void _format(final WebApplication webApplication, @Extension final IFormattableDocument document) {
    EList<Entity> _entities = webApplication.getEntities();
    for (final Entity entities : _entities) {
      document.<Entity>format(entities);
    }
    RelationShip _relationships = webApplication.getRelationships();
    document.<RelationShip>format(_relationships);
  }
  
  protected void _format(final Entity entity, @Extension final IFormattableDocument document) {
    EList<Attribute> _attributes = entity.getAttributes();
    for (final Attribute attributes : _attributes) {
      document.<Attribute>format(attributes);
    }
  }
  
  public void format(final Object entity, final IFormattableDocument document) {
    if (entity instanceof XtextResource) {
      _format((XtextResource)entity, document);
      return;
    } else if (entity instanceof Entity) {
      _format((Entity)entity, document);
      return;
    } else if (entity instanceof WebApplication) {
      _format((WebApplication)entity, document);
      return;
    } else if (entity instanceof EObject) {
      _format((EObject)entity, document);
      return;
    } else if (entity == null) {
      _format((Void)null, document);
      return;
    } else if (entity != null) {
      _format(entity, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(entity, document).toString());
    }
  }
}
