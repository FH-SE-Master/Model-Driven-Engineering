/*
 * generated by Xtext 2.10.0
 */
package at.fhhagenberg.swml.xtext.solution.generator

import at.fhhagenberg.swml.xtext.solution.solution.Entity
import at.fhhagenberg.swml.xtext.solution.solution.Relationship
import at.fhhagenberg.swml.xtext.solution.solution.WebApplication
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SolutionGenerator extends AbstractGenerator {

override doGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for(e: input.allContents.toIterable.filter(typeof(WebApplication))) {
			fsa.generateFile("hibernate.cfg.xml",e.hibernateXML)
			for (entity : e.entities){
				fsa.generateFile("beans/"+entity.name + ".java",compileBean(entity,e))
				fsa.generateFile("beans/"+entity.name + ".hbm.xml",createHibernateMapping(entity,e))
				fsa.generateFile("daos/"+entity.name+"DAO" + ".java",entity.createDAOInterface)
				fsa.generateFile("daosImpl/"+entity.name+"DAO" + ".java",entity.createDAO)
			}
		}
	}
	
	def hibernateXML(WebApplication app)'''
		<?xml version='1.0' encoding='utf-8'?>
		<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
		<hibernate-configuration>
		    <session-factory>
		        <property name="hibernate.connection.driver_class">org.postgresql.Driver</property>
		        <property name="hibernate.connection.url">jdbc:postgresql://localhost:5432/test</property>
		        <property name="hibernate.connection.username">testname</property>
		        <property name="hibernate.connection.password">testpass</property>
		        <property name="dialect">org.hibernate.dialect.PostgreSQLDialect</property>
		        <property name="show_sql">true</property>
		        <property name="transaction.factory_class">
		             org.hibernate.transaction.JDBCTransactionFactory
		        </property>
		        <property name="hibernate.cache.provider_class">
		             org.hibernate.cache.HashtableCacheProvider
		        </property>
		        <property name="hibernate.hbm2ddl.auto">update</property>  
		        «FOR e : app.entities»
		        <mapping resource="beans/«e.name».hbm.xml"/>
				«ENDFOR»
		    </session-factory>
		</hibernate-configuration>
	'''

	
	def compileBean(Entity e, WebApplication app) '''
		package beans;
		
		import java.util.Set;
		
		public class «e.name» {
			«FOR prop :e.attributes»
			private «prop.type.literal» «prop.name.toFirstLower»;			
			
			public «prop.type.literal» get«prop.name.toFirstUpper()»() {
				return «prop.name»;
			}
			
			public void set«prop.name.toFirstUpper()»(«prop.type.literal» «prop.name») {
				this.«prop.name» = «prop.name»;
			}
			«ENDFOR»
			
			«FOR ref :app.relationships»
				«IF ref.source.equals(e)»
					private «ref.propertyType» «ref.name.toFirstLower»;			
			
					public «ref.propertyType» get«ref.name.toFirstUpper()»() {
						return «ref.name»;
					}
			
					public void set«ref.name.toFirstUpper()»(«ref.propertyType» «ref.name») {
						this.«ref.name» = «ref.name»;
					}
				«ENDIF»
			«ENDFOR»
			
			public «e.name»() {}
		}		
	'''
	
	def getPropertyType(Relationship relationship){
		var String propertyType
		if (relationship.upper > 1 || relationship.upper == -1){ 
			propertyType="Set<"+relationship.target.name+">"
		}else { 
			propertyType=relationship.target.name
		}
		return propertyType
	}
	
	def createHibernateMapping(Entity e, WebApplication app) '''
	<?xml version="1.0"?>
	<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
	<hibernate-mapping package="beans">
	<class name="«e.name»">
		«IF e.id != null»
			<id name="«e.id.name»" column="«e.id.name»_ID"></id>
		«ENDIF»
		«FOR attr : e.attributes»
			<property name="«attr.name»" type="«attr.type»"/>
		«ENDFOR»
		«FOR ref :app.relationships»
			«IF ref.source.equals(e)»
				«IF ref.upper > 1»
					<set name="«ref.name»" inverse="true" cascade="save-update">
						<key column="«e.id.name»_ID"/>
						<one-to-many class="«ref.target.name»"/>
					</set>
				«ELSEIF ref.ref != null»
					<many-to-one name="«ref.name»" column="«e.id.name»_ID" class="«ref.target.name»" not-null="true"/>
				«ELSE»
					<property name="«ref.name»" type="«ref.target.name»"/>
				«ENDIF»
			«ENDIF»
		«ENDFOR»
	</class>
	</hibernate-mapping>
	'''
	def createDAOInterface(Entity dao)'''
	package daos;
	
	import beans.*;
	import java.util.List;
	
	public interface «dao.name+"DAO"» {
		public List get«dao.name»s();
		public «dao.name» get«dao.name»(«dao.id.type» id);
		public void save«dao.name»(«dao.name» «dao.name.toFirstLower()»);
		public void remove«dao.name»(«dao.id.type» id);
	}	
	'''
	
	def createDAO(Entity dao)'''
	package daosImpl;
	
	import beans.*;
	import daos.*;
	import org.hibernate.HibernateException;
	import org.hibernate.Query;
	import org.hibernate.Session;

	import test.HibernateUtil;

	import java.util.List;
	
	public class «dao.name»Hibernate implements «dao.name» {
		public «dao.name»Hibernate() {}
		
		
		public List get«dao.name»s() {
			Session session = HibernateUtil.getSession();
	        List list = null;
	
	        try {
	            Query query = session.createQuery("from «dao.name»");
	            list = query.list();
	        } catch (HibernateException e) {
	            e.printStackTrace();
	        }
	
	        HibernateUtil.closeSession();
	
	        return list;
		}
		
		public «dao.name» get«dao.name»(«dao.id.type» id) {
			Session session = HibernateUtil.getSession();
			
	        «dao.name» «dao.name.toLowerCase()» = null;
	
	        try {
	            «dao.name.toLowerCase()» = («dao.name») session.load(«dao.name».class, id);
	        } catch (HibernateException e) {
	            e.printStackTrace();
	        }
	
	        return «dao.name.toLowerCase()»;
		}
		
		public void save«dao.name»(«dao.name» «dao.name.toLowerCase()») {
			Session session = HibernateUtil.getSession();

	        try {
	            HibernateUtil.beginTransaction();
	            session.saveOrUpdate(«dao.name.toLowerCase()»);
	            session.flush();
	            HibernateUtil.commitTransaction();
	        } catch (HibernateException e) {
	            e.printStackTrace();
	        }
	
	        HibernateUtil.closeSession();
		}
		
		public void remove«dao.name»(«dao.id.type» id) {
			Session session = HibernateUtil.getSession();

	        try {
	            HibernateUtil.beginTransaction();
	            «dao.name» «dao.name.toLowerCase()» = («dao.name») ses-sion.load(«dao.name».class, id);
	            session.delete(«dao.name.toLowerCase()»);
	            session.flush();
	            HibernateUtil.commitTransaction();
	        } catch (HibernateException e) {
	            e.printStackTrace();
	        }
	
	        HibernateUtil.closeSession();
		}		
	}
	'''
	
	
	
}
