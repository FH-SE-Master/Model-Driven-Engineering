/**
 * generated by Xtext 2.10.0
 */
package at.fhhagenberg.swml.xtext.solution.formatting2;

import at.fhhagenberg.swml.xtext.solution.services.SolutionGrammarAccess;
import at.fhhagenberg.swml.xtext.solution.solution.Attribute;
import at.fhhagenberg.swml.xtext.solution.solution.Entity;
import at.fhhagenberg.swml.xtext.solution.solution.Link;
import at.fhhagenberg.swml.xtext.solution.solution.Relationship;
import at.fhhagenberg.swml.xtext.solution.solution.WebApplication;
import at.fhhagenberg.swml.xtext.solution.solution.WebPage;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegionsFinder;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class SolutionFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private SolutionGrammarAccess _solutionGrammarAccess;
  
  protected void _format(final WebApplication webApplication, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<WebApplication>interior(webApplication, _function);
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(webApplication);
    ISemanticRegion _keyword = _regionFor.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(_keyword, _function_1);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(webApplication);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword_1, _function_2);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(webApplication);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_2, _function_3);
    EList<Entity> _entities = webApplication.getEntities();
    for (final Entity e : _entities) {
      document.<Entity>format(e);
    }
    EList<Relationship> _relationships = webApplication.getRelationships();
    for (final Relationship relationships : _relationships) {
      document.<Relationship>format(relationships);
    }
    EList<WebPage> _webPages = webApplication.getWebPages();
    for (final WebPage webPages : _webPages) {
      document.<WebPage>format(webPages);
    }
    ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(webApplication);
    ISemanticRegion _keyword_3 = _regionFor_3.keyword("homePage");
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_3, _function_4);
    ISemanticRegionsFinder _regionFor_4 = this.textRegionExtensions.regionFor(webApplication);
    ISemanticRegion _keyword_4 = _regionFor_4.keyword(";");
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(_keyword_4, _function_5);
    ISemanticRegionsFinder _regionFor_5 = this.textRegionExtensions.regionFor(webApplication);
    ISemanticRegion _keyword_5 = _regionFor_5.keyword(";");
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword_5, _function_6);
  }
  
  protected void _format(final Entity e, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Entity>interior(e, _function);
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(e);
    ISemanticRegion _keyword = _regionFor.keyword("entity");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword, _function_1);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(e);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(_keyword_1, _function_2);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(e);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword_2, _function_3);
    ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(e);
    ISemanticRegion _keyword_3 = _regionFor_3.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_3, _function_4);
    ISemanticRegionsFinder _regionFor_4 = this.textRegionExtensions.regionFor(e);
    ISemanticRegion _keyword_4 = _regionFor_4.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword_4, _function_5);
    EList<Attribute> _attributes = e.getAttributes();
    for (final Attribute a : _attributes) {
      document.<Attribute>format(a);
    }
    Attribute _id = e.getId();
    document.<Attribute>format(_id);
  }
  
  protected void _format(final Attribute a, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Attribute>interior(a, _function);
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(a);
    ISemanticRegion _keyword = _regionFor.keyword(";");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(_keyword, _function_1);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(a);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword(";");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword_1, _function_2);
  }
  
  protected void _format(final Relationship r, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(r);
    ISemanticRegion _keyword = _regionFor.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(_keyword, _function);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(r);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword_1, _function_1);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(r);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_2, _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Relationship>interior(r, _function_3);
    ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(r);
    ISemanticRegion _keyword_3 = _regionFor_3.keyword(";");
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(_keyword_3, _function_4);
    ISemanticRegionsFinder _regionFor_4 = this.textRegionExtensions.regionFor(r);
    ISemanticRegion _keyword_4 = _regionFor_4.keyword(";");
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword_4, _function_5);
    ISemanticRegionsFinder _regionFor_5 = this.textRegionExtensions.regionFor(r);
    ISemanticRegion _keyword_5 = _regionFor_5.keyword("source");
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_5, _function_6);
    ISemanticRegionsFinder _regionFor_6 = this.textRegionExtensions.regionFor(r);
    ISemanticRegion _keyword_6 = _regionFor_6.keyword("target");
    final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_6, _function_7);
    ISemanticRegionsFinder _regionFor_7 = this.textRegionExtensions.regionFor(r);
    ISemanticRegion _keyword_7 = _regionFor_7.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword_7, _function_8);
  }
  
  protected void _format(final WebPage page, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(page);
    ISemanticRegion _keyword = _regionFor.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(_keyword, _function);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(page);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword_1, _function_1);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(page);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_2, _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<WebPage>interior(page, _function_3);
    ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(page);
    ISemanticRegion _keyword_3 = _regionFor_3.keyword(";");
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(_keyword_3, _function_4);
    ISemanticRegionsFinder _regionFor_4 = this.textRegionExtensions.regionFor(page);
    ISemanticRegion _keyword_4 = _regionFor_4.keyword(";");
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword_4, _function_5);
    EList<Link> _source = page.getSource();
    for (final Link source : _source) {
      document.<Link>format(source);
    }
    ISemanticRegionsFinder _regionFor_5 = this.textRegionExtensions.regionFor(page);
    ISemanticRegion _keyword_5 = _regionFor_5.keyword("home");
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_5, _function_6);
    ISemanticRegionsFinder _regionFor_6 = this.textRegionExtensions.regionFor(page);
    ISemanticRegion _keyword_6 = _regionFor_6.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_6, _function_7);
  }
  
  protected void _format(final Link link, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(link);
    ISemanticRegion _keyword = _regionFor.keyword("contextualLink");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword, _function);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(link);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("link");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_1, _function_1);
  }
  
  public void format(final Object a, final IFormattableDocument document) {
    if (a instanceof XtextResource) {
      _format((XtextResource)a, document);
      return;
    } else if (a instanceof Attribute) {
      _format((Attribute)a, document);
      return;
    } else if (a instanceof Entity) {
      _format((Entity)a, document);
      return;
    } else if (a instanceof Link) {
      _format((Link)a, document);
      return;
    } else if (a instanceof Relationship) {
      _format((Relationship)a, document);
      return;
    } else if (a instanceof WebApplication) {
      _format((WebApplication)a, document);
      return;
    } else if (a instanceof WebPage) {
      _format((WebPage)a, document);
      return;
    } else if (a instanceof EObject) {
      _format((EObject)a, document);
      return;
    } else if (a == null) {
      _format((Void)null, document);
      return;
    } else if (a != null) {
      _format(a, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(a, document).toString());
    }
  }
}
