/**
 * generated by Xtext 2.10.0
 */
package at.fhhagenberg.swml.xtext.solution.generator;

import at.fhhagenberg.swml.xtext.solution.solution.Attribute;
import at.fhhagenberg.swml.xtext.solution.solution.Datatype;
import at.fhhagenberg.swml.xtext.solution.solution.Entity;
import at.fhhagenberg.swml.xtext.solution.solution.Relationship;
import at.fhhagenberg.swml.xtext.solution.solution.WebApplication;
import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SolutionGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource input, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = input.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<WebApplication> _filter = Iterables.<WebApplication>filter(_iterable, WebApplication.class);
    for (final WebApplication e : _filter) {
      {
        CharSequence _hibernateXML = this.hibernateXML(e);
        fsa.generateFile("hibernate.cfg.xml", _hibernateXML);
        EList<Entity> _entities = e.getEntities();
        for (final Entity entity : _entities) {
          {
            String _name = entity.getName();
            String _plus = ("beans/" + _name);
            String _plus_1 = (_plus + ".java");
            CharSequence _compileBean = this.compileBean(entity, e);
            fsa.generateFile(_plus_1, _compileBean);
            String _name_1 = entity.getName();
            String _plus_2 = ("beans/" + _name_1);
            String _plus_3 = (_plus_2 + ".hbm.xml");
            CharSequence _createHibernateMapping = this.createHibernateMapping(entity, e);
            fsa.generateFile(_plus_3, _createHibernateMapping);
            String _name_2 = entity.getName();
            String _plus_4 = ("daos/" + _name_2);
            String _plus_5 = (_plus_4 + "DAO");
            String _plus_6 = (_plus_5 + ".java");
            CharSequence _createDAOInterface = this.createDAOInterface(entity);
            fsa.generateFile(_plus_6, _createDAOInterface);
            String _name_3 = entity.getName();
            String _plus_7 = ("daosImpl/" + _name_3);
            String _plus_8 = (_plus_7 + "DAO");
            String _plus_9 = (_plus_8 + ".java");
            CharSequence _createDAO = this.createDAO(entity);
            fsa.generateFile(_plus_9, _createDAO);
          }
        }
      }
    }
  }
  
  public CharSequence hibernateXML(final WebApplication app) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\'1.0\' encoding=\'utf-8\'?>");
    _builder.newLine();
    _builder.append("<!DOCTYPE hibernate-configuration PUBLIC \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\" \"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd\">");
    _builder.newLine();
    _builder.append("<hibernate-configuration>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<session-factory>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<property name=\"hibernate.connection.driver_class\">org.postgresql.Driver</property>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<property name=\"hibernate.connection.url\">jdbc:postgresql://localhost:5432/test</property>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<property name=\"hibernate.connection.username\">testname</property>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<property name=\"hibernate.connection.password\">testpass</property>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<property name=\"dialect\">org.hibernate.dialect.PostgreSQLDialect</property>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<property name=\"show_sql\">true</property>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<property name=\"transaction.factory_class\">");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("org.hibernate.transaction.JDBCTransactionFactory");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</property>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<property name=\"hibernate.cache.provider_class\">");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("org.hibernate.cache.HashtableCacheProvider");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</property>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<property name=\"hibernate.hbm2ddl.auto\">update</property>  ");
    _builder.newLine();
    {
      EList<Entity> _entities = app.getEntities();
      for(final Entity e : _entities) {
        _builder.append("        ");
        _builder.append("<mapping resource=\"beans/");
        String _name = e.getName();
        _builder.append(_name, "        ");
        _builder.append(".hbm.xml\"/>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.append("</session-factory>");
    _builder.newLine();
    _builder.append("</hibernate-configuration>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileBean(final Entity e, final WebApplication app) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package beans;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.Set;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = e.getName();
    _builder.append(_name, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      EList<Attribute> _attributes = e.getAttributes();
      for(final Attribute prop : _attributes) {
        _builder.append("\t");
        _builder.append("private ");
        Datatype _type = prop.getType();
        String _literal = _type.getLiteral();
        _builder.append(_literal, "\t");
        _builder.append(" ");
        String _name_1 = prop.getName();
        String _firstLower = StringExtensions.toFirstLower(_name_1);
        _builder.append(_firstLower, "\t");
        _builder.append(";\t\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public ");
        Datatype _type_1 = prop.getType();
        String _literal_1 = _type_1.getLiteral();
        _builder.append(_literal_1, "\t");
        _builder.append(" get");
        String _name_2 = prop.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name_2);
        _builder.append(_firstUpper, "\t");
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return ");
        String _name_3 = prop.getName();
        _builder.append(_name_3, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public void set");
        String _name_4 = prop.getName();
        String _firstUpper_1 = StringExtensions.toFirstUpper(_name_4);
        _builder.append(_firstUpper_1, "\t");
        _builder.append("(");
        Datatype _type_2 = prop.getType();
        String _literal_2 = _type_2.getLiteral();
        _builder.append(_literal_2, "\t");
        _builder.append(" ");
        String _name_5 = prop.getName();
        _builder.append(_name_5, "\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("this.");
        String _name_6 = prop.getName();
        _builder.append(_name_6, "\t\t");
        _builder.append(" = ");
        String _name_7 = prop.getName();
        _builder.append(_name_7, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Relationship> _relationships = app.getRelationships();
      for(final Relationship ref : _relationships) {
        {
          Entity _source = ref.getSource();
          boolean _equals = _source.equals(e);
          if (_equals) {
            _builder.append("\t");
            _builder.append("private ");
            String _propertyType = this.getPropertyType(ref);
            _builder.append(_propertyType, "\t");
            _builder.append(" ");
            String _name_8 = ref.getName();
            String _firstLower_1 = StringExtensions.toFirstLower(_name_8);
            _builder.append(_firstLower_1, "\t");
            _builder.append(";\t\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("public ");
            String _propertyType_1 = this.getPropertyType(ref);
            _builder.append(_propertyType_1, "\t");
            _builder.append(" get");
            String _name_9 = ref.getName();
            String _firstUpper_2 = StringExtensions.toFirstUpper(_name_9);
            _builder.append(_firstUpper_2, "\t");
            _builder.append("() {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("return ");
            String _name_10 = ref.getName();
            _builder.append(_name_10, "\t\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("public void set");
            String _name_11 = ref.getName();
            String _firstUpper_3 = StringExtensions.toFirstUpper(_name_11);
            _builder.append(_firstUpper_3, "\t");
            _builder.append("(");
            String _propertyType_2 = this.getPropertyType(ref);
            _builder.append(_propertyType_2, "\t");
            _builder.append(" ");
            String _name_12 = ref.getName();
            _builder.append(_name_12, "\t");
            _builder.append(") {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("this.");
            String _name_13 = ref.getName();
            _builder.append(_name_13, "\t\t");
            _builder.append(" = ");
            String _name_14 = ref.getName();
            _builder.append(_name_14, "\t\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name_15 = e.getName();
    _builder.append(_name_15, "\t");
    _builder.append("() {}");
    _builder.newLineIfNotEmpty();
    _builder.append("}\t\t");
    _builder.newLine();
    return _builder;
  }
  
  public String getPropertyType(final Relationship relationship) {
    String propertyType = null;
    if ((((relationship.getUpper()).intValue() > 1) || ((relationship.getUpper()).intValue() == (-1)))) {
      Entity _target = relationship.getTarget();
      String _name = _target.getName();
      String _plus = ("Set<" + _name);
      String _plus_1 = (_plus + ">");
      propertyType = _plus_1;
    } else {
      Entity _target_1 = relationship.getTarget();
      String _name_1 = _target_1.getName();
      propertyType = _name_1;
    }
    return propertyType;
  }
  
  public CharSequence createHibernateMapping(final Entity e, final WebApplication app) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\"?>");
    _builder.newLine();
    _builder.append("<!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\" \"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd\">");
    _builder.newLine();
    _builder.append("<hibernate-mapping package=\"beans\">");
    _builder.newLine();
    _builder.append("<class name=\"");
    String _name = e.getName();
    _builder.append(_name, "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    {
      Attribute _id = e.getId();
      boolean _notEquals = (!Objects.equal(_id, null));
      if (_notEquals) {
        _builder.append("\t");
        _builder.append("<id name=\"");
        Attribute _id_1 = e.getId();
        String _name_1 = _id_1.getName();
        _builder.append(_name_1, "\t");
        _builder.append("\" column=\"");
        Attribute _id_2 = e.getId();
        String _name_2 = _id_2.getName();
        _builder.append(_name_2, "\t");
        _builder.append("_ID\"></id>");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Attribute> _attributes = e.getAttributes();
      for(final Attribute attr : _attributes) {
        _builder.append("\t");
        _builder.append("<property name=\"");
        String _name_3 = attr.getName();
        _builder.append(_name_3, "\t");
        _builder.append("\" type=\"");
        Datatype _type = attr.getType();
        _builder.append(_type, "\t");
        _builder.append("\"/>");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Relationship> _relationships = app.getRelationships();
      for(final Relationship ref : _relationships) {
        {
          Entity _source = ref.getSource();
          boolean _equals = _source.equals(e);
          if (_equals) {
            {
              Integer _upper = ref.getUpper();
              boolean _greaterThan = ((_upper).intValue() > 1);
              if (_greaterThan) {
                _builder.append("\t");
                _builder.append("<set name=\"");
                String _name_4 = ref.getName();
                _builder.append(_name_4, "\t");
                _builder.append("\" inverse=\"true\" cascade=\"save-update\">");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("<key column=\"");
                Attribute _id_3 = e.getId();
                String _name_5 = _id_3.getName();
                _builder.append(_name_5, "\t\t");
                _builder.append("_ID\"/>");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("<one-to-many class=\"");
                Entity _target = ref.getTarget();
                String _name_6 = _target.getName();
                _builder.append(_name_6, "\t\t");
                _builder.append("\"/>");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("</set>");
                _builder.newLine();
              } else {
                Relationship _ref = ref.getRef();
                boolean _notEquals_1 = (!Objects.equal(_ref, null));
                if (_notEquals_1) {
                  _builder.append("\t");
                  _builder.append("<many-to-one name=\"");
                  String _name_7 = ref.getName();
                  _builder.append(_name_7, "\t");
                  _builder.append("\" column=\"");
                  Attribute _id_4 = e.getId();
                  String _name_8 = _id_4.getName();
                  _builder.append(_name_8, "\t");
                  _builder.append("_ID\" class=\"");
                  Entity _target_1 = ref.getTarget();
                  String _name_9 = _target_1.getName();
                  _builder.append(_name_9, "\t");
                  _builder.append("\" not-null=\"true\"/>");
                  _builder.newLineIfNotEmpty();
                } else {
                  _builder.append("\t");
                  _builder.append("<property name=\"");
                  String _name_10 = ref.getName();
                  _builder.append(_name_10, "\t");
                  _builder.append("\" type=\"");
                  Entity _target_2 = ref.getTarget();
                  String _name_11 = _target_2.getName();
                  _builder.append(_name_11, "\t");
                  _builder.append("\"/>");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
      }
    }
    _builder.append("</class>");
    _builder.newLine();
    _builder.append("</hibernate-mapping>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence createDAOInterface(final Entity dao) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package daos;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import beans.*;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public interface ");
    String _name = dao.getName();
    String _plus = (_name + "DAO");
    _builder.append(_plus, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public List get");
    String _name_1 = dao.getName();
    _builder.append(_name_1, "\t");
    _builder.append("s();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public ");
    String _name_2 = dao.getName();
    _builder.append(_name_2, "\t");
    _builder.append(" get");
    String _name_3 = dao.getName();
    _builder.append(_name_3, "\t");
    _builder.append("(");
    Attribute _id = dao.getId();
    Datatype _type = _id.getType();
    _builder.append(_type, "\t");
    _builder.append(" id);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public void save");
    String _name_4 = dao.getName();
    _builder.append(_name_4, "\t");
    _builder.append("(");
    String _name_5 = dao.getName();
    _builder.append(_name_5, "\t");
    _builder.append(" ");
    String _name_6 = dao.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_6);
    _builder.append(_firstLower, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public void remove");
    String _name_7 = dao.getName();
    _builder.append(_name_7, "\t");
    _builder.append("(");
    Attribute _id_1 = dao.getId();
    Datatype _type_1 = _id_1.getType();
    _builder.append(_type_1, "\t");
    _builder.append(" id);");
    _builder.newLineIfNotEmpty();
    _builder.append("}\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence createDAO(final Entity dao) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package daosImpl;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import beans.*;");
    _builder.newLine();
    _builder.append("import daos.*;");
    _builder.newLine();
    _builder.append("import org.hibernate.HibernateException;");
    _builder.newLine();
    _builder.append("import org.hibernate.Query;");
    _builder.newLine();
    _builder.append("import org.hibernate.Session;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import test.HibernateUtil;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = dao.getName();
    _builder.append(_name, "");
    _builder.append("Hibernate implements ");
    String _name_1 = dao.getName();
    _builder.append(_name_1, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public ");
    String _name_2 = dao.getName();
    _builder.append(_name_2, "\t");
    _builder.append("Hibernate() {}");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List get");
    String _name_3 = dao.getName();
    _builder.append(_name_3, "\t");
    _builder.append("s() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("Session session = HibernateUtil.getSession();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("List list = null;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Query query = session.createQuery(\"from ");
    String _name_4 = dao.getName();
    _builder.append(_name_4, "            ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("list = query.list();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} catch (HibernateException e) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("HibernateUtil.closeSession();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return list;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name_5 = dao.getName();
    _builder.append(_name_5, "\t");
    _builder.append(" get");
    String _name_6 = dao.getName();
    _builder.append(_name_6, "\t");
    _builder.append("(");
    Attribute _id = dao.getId();
    Datatype _type = _id.getType();
    _builder.append(_type, "\t");
    _builder.append(" id) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("Session session = HibernateUtil.getSession();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("        ");
    String _name_7 = dao.getName();
    _builder.append(_name_7, "        ");
    _builder.append(" ");
    String _name_8 = dao.getName();
    String _lowerCase = _name_8.toLowerCase();
    _builder.append(_lowerCase, "        ");
    _builder.append(" = null;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("            ");
    String _name_9 = dao.getName();
    String _lowerCase_1 = _name_9.toLowerCase();
    _builder.append(_lowerCase_1, "            ");
    _builder.append(" = (");
    String _name_10 = dao.getName();
    _builder.append(_name_10, "            ");
    _builder.append(") session.load(");
    String _name_11 = dao.getName();
    _builder.append(_name_11, "            ");
    _builder.append(".class, id);");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("} catch (HibernateException e) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return ");
    String _name_12 = dao.getName();
    String _lowerCase_2 = _name_12.toLowerCase();
    _builder.append(_lowerCase_2, "        ");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void save");
    String _name_13 = dao.getName();
    _builder.append(_name_13, "\t");
    _builder.append("(");
    String _name_14 = dao.getName();
    _builder.append(_name_14, "\t");
    _builder.append(" ");
    String _name_15 = dao.getName();
    String _lowerCase_3 = _name_15.toLowerCase();
    _builder.append(_lowerCase_3, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("Session session = HibernateUtil.getSession();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("HibernateUtil.beginTransaction();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("session.saveOrUpdate(");
    String _name_16 = dao.getName();
    String _lowerCase_4 = _name_16.toLowerCase();
    _builder.append(_lowerCase_4, "            ");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("session.flush();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("HibernateUtil.commitTransaction();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} catch (HibernateException e) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("HibernateUtil.closeSession();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void remove");
    String _name_17 = dao.getName();
    _builder.append(_name_17, "\t");
    _builder.append("(");
    Attribute _id_1 = dao.getId();
    Datatype _type_1 = _id_1.getType();
    _builder.append(_type_1, "\t");
    _builder.append(" id) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("Session session = HibernateUtil.getSession();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("HibernateUtil.beginTransaction();");
    _builder.newLine();
    _builder.append("            ");
    String _name_18 = dao.getName();
    _builder.append(_name_18, "            ");
    _builder.append(" ");
    String _name_19 = dao.getName();
    String _lowerCase_5 = _name_19.toLowerCase();
    _builder.append(_lowerCase_5, "            ");
    _builder.append(" = (");
    String _name_20 = dao.getName();
    _builder.append(_name_20, "            ");
    _builder.append(") ses-sion.load(");
    String _name_21 = dao.getName();
    _builder.append(_name_21, "            ");
    _builder.append(".class, id);");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("session.delete(");
    String _name_22 = dao.getName();
    String _lowerCase_6 = _name_22.toLowerCase();
    _builder.append(_lowerCase_6, "            ");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("session.flush();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("HibernateUtil.commitTransaction();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} catch (HibernateException e) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("HibernateUtil.closeSession();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
