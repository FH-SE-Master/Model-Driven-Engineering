/*
 * generated by Xtext 2.10.0
 */
package at.fhhagenberg.swml.xtext.solution.serializer;

import at.fhhagenberg.swml.xtext.solution.services.SolutionGrammarAccess;
import at.fhhagenberg.swml.xtext.solution.solution.Attribute;
import at.fhhagenberg.swml.xtext.solution.solution.ContextualLink;
import at.fhhagenberg.swml.xtext.solution.solution.CreatePage;
import at.fhhagenberg.swml.xtext.solution.solution.DeletePage;
import at.fhhagenberg.swml.xtext.solution.solution.Entity;
import at.fhhagenberg.swml.xtext.solution.solution.EntityPage;
import at.fhhagenberg.swml.xtext.solution.solution.IndexPage;
import at.fhhagenberg.swml.xtext.solution.solution.NonContextualLink;
import at.fhhagenberg.swml.xtext.solution.solution.Relationship;
import at.fhhagenberg.swml.xtext.solution.solution.SolutionPackage;
import at.fhhagenberg.swml.xtext.solution.solution.StaticPage;
import at.fhhagenberg.swml.xtext.solution.solution.UpdatePage;
import at.fhhagenberg.swml.xtext.solution.solution.WebApplication;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SolutionSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SolutionGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SolutionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SolutionPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case SolutionPackage.CONTEXTUAL_LINK:
				sequence_ContextualLink(context, (ContextualLink) semanticObject); 
				return; 
			case SolutionPackage.CREATE_PAGE:
				sequence_CreatePage(context, (CreatePage) semanticObject); 
				return; 
			case SolutionPackage.DELETE_PAGE:
				sequence_DeletePage(context, (DeletePage) semanticObject); 
				return; 
			case SolutionPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case SolutionPackage.ENTITY_PAGE:
				sequence_EntityPage(context, (EntityPage) semanticObject); 
				return; 
			case SolutionPackage.INDEX_PAGE:
				sequence_IndexPage(context, (IndexPage) semanticObject); 
				return; 
			case SolutionPackage.NON_CONTEXTUAL_LINK:
				sequence_NonContextualLink(context, (NonContextualLink) semanticObject); 
				return; 
			case SolutionPackage.RELATIONSHIP:
				sequence_Relationship(context, (Relationship) semanticObject); 
				return; 
			case SolutionPackage.STATIC_PAGE:
				sequence_StaticPage(context, (StaticPage) semanticObject); 
				return; 
			case SolutionPackage.UPDATE_PAGE:
				sequence_UpdatePage(context, (UpdatePage) semanticObject); 
				return; 
			case SolutionPackage.WEB_APPLICATION:
				sequence_WebApplication(context, (WebApplication) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=ID type=Datatype)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SolutionPackage.Literals.ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SolutionPackage.Literals.ATTRIBUTE__NAME));
			if (transientValues.isValueTransient(semanticObject, SolutionPackage.Literals.ATTRIBUTE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SolutionPackage.Literals.ATTRIBUTE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAttributeAccess().getTypeDatatypeEnumRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Link returns ContextualLink
	 *     ContextualLink returns ContextualLink
	 *
	 * Constraint:
	 *     (name=ID target=[WebPage|ID] information=[Entity|ID])
	 */
	protected void sequence_ContextualLink(ISerializationContext context, ContextualLink semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SolutionPackage.Literals.LINK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SolutionPackage.Literals.LINK__NAME));
			if (transientValues.isValueTransient(semanticObject, SolutionPackage.Literals.LINK__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SolutionPackage.Literals.LINK__TARGET));
			if (transientValues.isValueTransient(semanticObject, SolutionPackage.Literals.CONTEXTUAL_LINK__INFORMATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SolutionPackage.Literals.CONTEXTUAL_LINK__INFORMATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContextualLinkAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getContextualLinkAccess().getTargetWebPageIDTerminalRuleCall_3_0_1(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getContextualLinkAccess().getInformationEntityIDTerminalRuleCall_5_0_1(), semanticObject.getInformation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     WebPage returns CreatePage
	 *     DynamicPage returns CreatePage
	 *     EditablePage returns CreatePage
	 *     CreatePage returns CreatePage
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         source+=Link* 
	 *         home=[NonContextualLink|ID] 
	 *         entity=[Entity|ID] 
	 *         webPages+=DynamicPage* 
	 *         back=ContextualLink
	 *     )
	 */
	protected void sequence_CreatePage(ISerializationContext context, CreatePage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WebPage returns DeletePage
	 *     DynamicPage returns DeletePage
	 *     EditablePage returns DeletePage
	 *     DeletePage returns DeletePage
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         source+=Link* 
	 *         home=[NonContextualLink|ID] 
	 *         entity=[Entity|ID] 
	 *         webPages+=DynamicPage* 
	 *         back=ContextualLink
	 *     )
	 */
	protected void sequence_DeletePage(ISerializationContext context, DeletePage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WebPage returns EntityPage
	 *     DynamicPage returns EntityPage
	 *     EntityPage returns EntityPage
	 *
	 * Constraint:
	 *     (name=ID source+=Link* home=[NonContextualLink|ID] webPages+=DynamicPage* entity=[Entity|ID])
	 */
	protected void sequence_EntityPage(ISerializationContext context, EntityPage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=ID attributes+=Attribute* id=[Attribute|ID])
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WebPage returns IndexPage
	 *     DynamicPage returns IndexPage
	 *     IndexPage returns IndexPage
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         source+=Link* 
	 *         home=[NonContextualLink|ID] 
	 *         entity=[Entity|ID] 
	 *         webPages+=DynamicPage* 
	 *         back=ContextualLink
	 *     )
	 */
	protected void sequence_IndexPage(ISerializationContext context, IndexPage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Link returns NonContextualLink
	 *     NonContextualLink returns NonContextualLink
	 *
	 * Constraint:
	 *     (name=ID target=[WebPage|ID])
	 */
	protected void sequence_NonContextualLink(ISerializationContext context, NonContextualLink semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SolutionPackage.Literals.LINK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SolutionPackage.Literals.LINK__NAME));
			if (transientValues.isValueTransient(semanticObject, SolutionPackage.Literals.LINK__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SolutionPackage.Literals.LINK__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNonContextualLinkAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getNonContextualLinkAccess().getTargetWebPageIDTerminalRuleCall_3_0_1(), semanticObject.getTarget());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relationship returns Relationship
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         lower=RoleNumber 
	 *         upper=RoleNumber 
	 *         source=[Entity|ID] 
	 *         target=[Entity|ID] 
	 *         ref=[Relationship|ID]?
	 *     )
	 */
	protected void sequence_Relationship(ISerializationContext context, Relationship semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WebPage returns StaticPage
	 *     StaticPage returns StaticPage
	 *
	 * Constraint:
	 *     (name=ID relativeURL=ID source+=Link* home=[NonContextualLink|ID])
	 */
	protected void sequence_StaticPage(ISerializationContext context, StaticPage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WebPage returns UpdatePage
	 *     DynamicPage returns UpdatePage
	 *     EditablePage returns UpdatePage
	 *     UpdatePage returns UpdatePage
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         source+=Link* 
	 *         home=[NonContextualLink|ID] 
	 *         entity=[Entity|ID] 
	 *         webPages+=DynamicPage* 
	 *         back=ContextualLink
	 *     )
	 */
	protected void sequence_UpdatePage(ISerializationContext context, UpdatePage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WebApplication returns WebApplication
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         entities+=Entity* 
	 *         relationships+=Relationship* 
	 *         webPages+=WebPage* 
	 *         homepage=[StaticPage|ID] 
	 *         creationDate=Timestamp
	 *     )
	 */
	protected void sequence_WebApplication(ISerializationContext context, WebApplication semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
