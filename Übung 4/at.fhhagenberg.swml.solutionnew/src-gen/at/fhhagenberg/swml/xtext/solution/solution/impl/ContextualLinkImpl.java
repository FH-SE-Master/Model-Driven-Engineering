/**
 * generated by Xtext 2.10.0
 */
package at.fhhagenberg.swml.xtext.solution.solution.impl;

import at.fhhagenberg.swml.xtext.solution.solution.ContextualLink;
import at.fhhagenberg.swml.xtext.solution.solution.Entity;
import at.fhhagenberg.swml.xtext.solution.solution.SolutionPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Contextual Link</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link at.fhhagenberg.swml.xtext.solution.solution.impl.ContextualLinkImpl#getInformation <em>Information</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ContextualLinkImpl extends LinkImpl implements ContextualLink
{
  /**
   * The cached value of the '{@link #getInformation() <em>Information</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInformation()
   * @generated
   * @ordered
   */
  protected Entity information;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContextualLinkImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SolutionPackage.Literals.CONTEXTUAL_LINK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity getInformation()
  {
    if (information != null && information.eIsProxy())
    {
      InternalEObject oldInformation = (InternalEObject)information;
      information = (Entity)eResolveProxy(oldInformation);
      if (information != oldInformation)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SolutionPackage.CONTEXTUAL_LINK__INFORMATION, oldInformation, information));
      }
    }
    return information;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity basicGetInformation()
  {
    return information;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInformation(Entity newInformation)
  {
    Entity oldInformation = information;
    information = newInformation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SolutionPackage.CONTEXTUAL_LINK__INFORMATION, oldInformation, information));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SolutionPackage.CONTEXTUAL_LINK__INFORMATION:
        if (resolve) return getInformation();
        return basicGetInformation();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SolutionPackage.CONTEXTUAL_LINK__INFORMATION:
        setInformation((Entity)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SolutionPackage.CONTEXTUAL_LINK__INFORMATION:
        setInformation((Entity)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SolutionPackage.CONTEXTUAL_LINK__INFORMATION:
        return information != null;
    }
    return super.eIsSet(featureID);
  }

} //ContextualLinkImpl
