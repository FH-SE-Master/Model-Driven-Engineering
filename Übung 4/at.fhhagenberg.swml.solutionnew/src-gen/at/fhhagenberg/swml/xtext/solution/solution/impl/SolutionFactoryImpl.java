/**
 * generated by Xtext 2.10.0
 */
package at.fhhagenberg.swml.xtext.solution.solution.impl;

import at.fhhagenberg.swml.xtext.solution.solution.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SolutionFactoryImpl extends EFactoryImpl implements SolutionFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SolutionFactory init()
  {
    try
    {
      SolutionFactory theSolutionFactory = (SolutionFactory)EPackage.Registry.INSTANCE.getEFactory(SolutionPackage.eNS_URI);
      if (theSolutionFactory != null)
      {
        return theSolutionFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SolutionFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SolutionFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SolutionPackage.WEB_APPLICATION: return createWebApplication();
      case SolutionPackage.WEB_PAGE: return createWebPage();
      case SolutionPackage.STATIC_PAGE: return createStaticPage();
      case SolutionPackage.DYNAMIC_PAGE: return createDynamicPage();
      case SolutionPackage.ENTITY_PAGE: return createEntityPage();
      case SolutionPackage.EDITABLE_PAGE: return createEditablePage();
      case SolutionPackage.CREATE_PAGE: return createCreatePage();
      case SolutionPackage.UPDATE_PAGE: return createUpdatePage();
      case SolutionPackage.DELETE_PAGE: return createDeletePage();
      case SolutionPackage.INDEX_PAGE: return createIndexPage();
      case SolutionPackage.ENTITY: return createEntity();
      case SolutionPackage.ATTRIBUTE: return createAttribute();
      case SolutionPackage.RELATIONSHIP: return createRelationship();
      case SolutionPackage.LINK: return createLink();
      case SolutionPackage.NON_CONTEXTUAL_LINK: return createNonContextualLink();
      case SolutionPackage.CONTEXTUAL_LINK: return createContextualLink();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case SolutionPackage.DATATYPE:
        return createDatatypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case SolutionPackage.DATATYPE:
        return convertDatatypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WebApplication createWebApplication()
  {
    WebApplicationImpl webApplication = new WebApplicationImpl();
    return webApplication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WebPage createWebPage()
  {
    WebPageImpl webPage = new WebPageImpl();
    return webPage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StaticPage createStaticPage()
  {
    StaticPageImpl staticPage = new StaticPageImpl();
    return staticPage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DynamicPage createDynamicPage()
  {
    DynamicPageImpl dynamicPage = new DynamicPageImpl();
    return dynamicPage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EntityPage createEntityPage()
  {
    EntityPageImpl entityPage = new EntityPageImpl();
    return entityPage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EditablePage createEditablePage()
  {
    EditablePageImpl editablePage = new EditablePageImpl();
    return editablePage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CreatePage createCreatePage()
  {
    CreatePageImpl createPage = new CreatePageImpl();
    return createPage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UpdatePage createUpdatePage()
  {
    UpdatePageImpl updatePage = new UpdatePageImpl();
    return updatePage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeletePage createDeletePage()
  {
    DeletePageImpl deletePage = new DeletePageImpl();
    return deletePage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IndexPage createIndexPage()
  {
    IndexPageImpl indexPage = new IndexPageImpl();
    return indexPage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Relationship createRelationship()
  {
    RelationshipImpl relationship = new RelationshipImpl();
    return relationship;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Link createLink()
  {
    LinkImpl link = new LinkImpl();
    return link;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NonContextualLink createNonContextualLink()
  {
    NonContextualLinkImpl nonContextualLink = new NonContextualLinkImpl();
    return nonContextualLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContextualLink createContextualLink()
  {
    ContextualLinkImpl contextualLink = new ContextualLinkImpl();
    return contextualLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Datatype createDatatypeFromString(EDataType eDataType, String initialValue)
  {
    Datatype result = Datatype.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDatatypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SolutionPackage getSolutionPackage()
  {
    return (SolutionPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SolutionPackage getPackage()
  {
    return SolutionPackage.eINSTANCE;
  }

} //SolutionFactoryImpl
